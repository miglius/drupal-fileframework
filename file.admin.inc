<?php
// $Id$
/**
 * @file
 * Module admin page callbacks.
 */

//////////////////////////////////////////////////////////////////////////////
// File settings

/**
 * Implements the settings page.
 *
 * @return
 *   The form structure.
 */
function file_admin_settings() {
  // Visibility settings
  $form['visibility'] = array('#type' => 'fieldset', '#title' => t('Visibility settings'), '#collapsible' => TRUE, '#collapsed' => FALSE);
  $form['visibility']['file_show_previews'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Previews'),
    '#description'   => t('Show the available generated previews for the files.'),
    '#default_value' => FILE_SHOW_PREVIEWS,
  );
  $form['visibility']['file_handler_autoload'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Preview autoload'),
    '#description'   => t('If "Previews" are enabled, then the preview generated by the first handler is automatically loaded via AHAH call.'),
    '#default_value' => FILE_HANDLER_AUTOLOAD,
  );
  $form['visibility']['file_show_generated'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Generated (converted) files'),
    '#description'   => t('Show a list of the avialable converted files in other MIME types. The list is also available as a block.'),
    '#default_value' => FILE_SHOW_GENERATED,
  );
  $form['visibility']['file_view_link'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('View link'),
    '#description'   => t('Show a "view" link next to "download" link. Clicking the view link will bring the file with a headder content-disposition set to inline.'),
    '#default_value' => FILE_VIEW_LINK,
  );
  /*
  $form['visibility']['file_info_link'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Info link'),
    '#description'   => t('Show an "info" link next to "download" link. Clicking the info link will show file\'s metadata.'),
    '#default_value' => FILE_INFO_LINK,
  );
  */
  $form['visibility']['file_properties_tab'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Properties tab'),
    '#description'   => t('Show a properties tab with a file\'s metadata.'),
    '#default_value' => FILE_PROPERTIES_TAB,
  );

  // Maintenance settings
  $form['maintenance'] = array('#type' => 'fieldset', '#title' => t('Maintenance settings'), '#collapsible' => TRUE, '#collapsed' => FALSE);
  $form['maintenance']['file_cron'] = array(
    '#type'          => 'radios',
    '#title'         => t('Perform automatic maintenance on cron runs'),
    '#options'       => array(FALSE => t('Disabled'), TRUE => t('Enabled')),
    '#default_value' => FILE_CRON,
    '#description'   => t('Enables automatic sanity checks and repairs for file paths, fingerprints, metadata and indexing. Normally you would always want to have this enabled, but in cases where you still want to maintain some legacy file data with old modules, you may not want this poking and changing that.'),
  );
  $form['maintenance']['file_cron_limit_size'] = array(
    '#type'          => 'select',
    '#title'         => t('Megabytes to convert per cron run'),
    '#default_value' => FILE_CRON_LIMIT_SIZE,
    '#options'       => drupal_map_assoc(array(16, 32, 64, 128, 256, 512, 1024, 2048, 4096)),
    '#description'   => t('The cron job will proccess uploaded files and create missing previews or files in other MIME types. The maximum amount of megabytes that will be processed in one cron run. Set this number lower if your cron is timing out or if PHP is running out of memory. Note that individual files larger than this limit will never be processed.'),
  );

  // MIME type autodetection
  $form['mime'] = array('#type' => 'fieldset', '#title' => t('MIME types'), '#collapsible' => TRUE, '#collapsed' => FALSE);
  $form['mime']['file_mime_autodetection'] = array(
    '#type'          => 'radios',
    '#title'         => t('Server-side MIME type autodetection after upload'),
    '#options'       => array(t('Disabled'), t('Enabled'), t('Conditional')),
    '#default_value' => FILE_MIME_AUTODETECTION,
    '#description'   => t('Whether to always attempt MIME type autodetection on the server side for any uploaded files, regardless of whether the client supplied MIME type information or not. Your choice here depends on how well-setup your server is for proper MIME detection and how much you trust your users\' web browsers to report correct MIME types. Unless you are very sure of what you are doing, you are advised to leave this disabled, which corresponds with Drupal\'s default behavior.'),
  );
  $form['mime']['file_mime_autodetection_conditions'] = array(
    '#type'          => 'textarea',
    '#title'         => t('MIME autodetection conditions'),
    '#default_value' => FILE_MIME_AUTODETECTION_CONDITIONS,
    '#rows'          => 3,
    '#description'   => t('If "Server-side MIME type autodetection after upload" is set to "Conditional", please specify for which uploaded files MIME types or file extensions the autodetection should be performed on the server side. One MIME type or file extension without leading dot per line.'),
  );
  $form['mime']['file_mime_registry_path'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Path to the server\'s MIME type definitions \'mime.types\' file'),
    '#default_value' => FILE_MIME_REGISTRY_PATH,
    '#description'   => t('The module will try to locate the MIME type definitions in the default locations, however if your web server is installed in the custom location, you should give a path to the \'mime.types\' file without a trailing slash.'),
  );

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Save configuration'),
  );
  $form['reset'] = array(
    '#type'  => 'submit',
    '#value' => t('Reset to defaults'),
  );

  return $form;
}

/**
 * Validate hook for the settings form.
 */
function file_admin_settings_validate($form, &$form_state) {
  $op = $form_state['clicked_button']['#value'];
  switch ($op) {
    case "Save configuration":
      $mime_path = $form_state['values']['file_mime_registry_path'];
      $mime_file = $mime_path .'/mime.types';
      if (!empty($mime_path) && (!file_exists($mime_file) || !is_readable($mime_file))) {
        form_set_error('file_file_mime_registry_path', t('A file %file does not exists or is not readable by the web server.', array('%file' => $mime_file)));
      }
      break;
  }
}

/**
 * Submit hook for the settings form.
 */
function file_admin_settings_submit($form, &$form_state) {
  $op = $form_state['clicked_button']['#value'];
  switch ($op) {
    case "Save configuration":
      variable_set('file_show_previews', $form_state['values']['file_show_previews']);
      variable_set('file_handler_autoload', $form_state['values']['file_handler_autoload']);
      variable_set('file_show_generated', $form_state['values']['file_show_generated']);
      variable_set('file_view_link', $form_state['values']['file_view_link']);
      //variable_set('file_info_link', $form_state['values']['file_info_link']);
      variable_set('file_properties_tab', $form_state['values']['file_properties_tab']);
      variable_set('file_cron', $form_state['values']['file_cron']);
      variable_set('file_cron_limit_size', $form_state['values']['file_cron_limit_size']);
      variable_set('file_mime_autodetection', $form_state['values']['file_mime_autodetection']);
      variable_set('file_mime_autodetection_conditions', $form_state['values']['file_mime_autodetection_conditions']);
      variable_set('file_mime_registry_path', $form_state['values']['file_mime_registry_path']);
      drupal_set_message(t('The configuration options have been saved.'));
      break;
    case "Reset to defaults":
      variable_del('file_show_previews');
      variable_del('file_handler_autoload');
      variable_del('file_show_generated');
      variable_del('file_view_link');
      //variable_del('file_info_link');
      variable_del('file_properties_tab');
      variable_del('file_cron');
      variable_del('file_cron_limit_size');
      variable_del('file_mime_autodetection');
      variable_del('file_mime_autodetection_conditions');
      variable_del('file_mime_registry_path');
      drupal_set_message(t('The configuration options have been reset to their default values.'));
      break;
  }
}

/**
 * Implements the handler settings page.
 *
 * @return
 *   The form structure.
 */
function file_admin_handler_settings() {
  // Handler settings
  $mime_types = file_get_mime_types();
  $mime_handlers = file_get_mime_handlers();
  foreach ($mime_handlers as $handler => $data) {
    $form['handler'][$handler]['title'] = array(
      '#value' => $mime_handlers[$handler]['name'],
    );
    $mimes = array();
    foreach ($mime_types as $mime => $data) {
      foreach ($data['handlers'] as $h) {
        if ($h == $handler) {
          $mimes[] = $mime;
        }
      }
    }
    $form['handler'][$handler]['mime'] = array(
      '#value' => implode('<br />', $mimes),
    );
    if (function_exists('file_get_mime_converters')) {
      $converters = array();
      foreach (file_get_mime_converters() as $from => $tos) {
        foreach ($tos as $to => $converter) {
          foreach ($converter['handlers'] as $h) {
            if ($h == $handler) {
              $converters[] = $from .' -> '. $to;
            }
          }
        }
      }
      $form['handler'][$handler]['convert'] = array(
        '#value' => implode('<br />', $converters),
      );
    }
    $form['handler'][$handler]['module'] = array(
      '#value' => $mime_handlers[$handler]['module'],
    );
    $form['handler'][$handler]['enabled'] = array(
      '#type'          => 'checkbox',
      '#name'          => 'handler_'. $handler .'_enabled',
      '#default_value' => $mime_handlers[$handler]['enabled'],
    );
    $form['handler'][$handler]['weight'] = array(
      '#type'          => 'weight',
      '#name'          => 'handler_'. $handler .'_weight',
      '#delta'         => 20,
      '#default_value' => $mime_handlers[$handler]['weight'],
    );
  }
  $form['handler']['table'] = '';

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Save configuration'),
  );
  $form['reset'] = array(
    '#type'  => 'submit',
    '#value' => t('Reset to defaults'),
  );

  return $form;
}

/**
 * Submit hook for the handler_settings form.
 */
function file_admin_handler_settings_submit($form, &$form_state) {
  $op = $form_state['clicked_button']['#value'];
  switch ($op) {
    case "Save configuration":
      $handlers = array();
      foreach ($form_state['clicked_button']['#post'] as $name => $val) {
        if (preg_match('/^handler_.*_weight/', $name)) {
          $handler = preg_replace(array('/^handler_/', '/_weight$/'), array('', ''), $name);
          $handlers[$handler]['weight'] = $val;
          $handlers[$handler]['enabled'] = !empty($form_state['clicked_button']['#post']['handler_'. $handler .'_enabled']) ? 1 : 0;
        }
      }
      variable_set('file_handlers', $handlers);
      drupal_set_message(t('The configuration options have been saved.'));
      break;
    case "Reset to defaults":
      variable_del('file_handlers');
      drupal_set_message(t('The configuration options have been reset to their default values.'));
      break;
  }
}

/**
 * Implements the registered MIMEs page.
 *
 * @return
 *   The themed HTML page.
 */
function file_admin_mime() {
  $head = array(t('Type'), t('Extensions'), t('Description'), t('Module'));
  $rows = array();
  foreach (file_get_mime_types() as $type => $info) {
    $mime_extensions = file_mime_extensions_for($type);
    $extension = !empty($mime_extensions) ? implode(', ', file_mime_extensions_for($type)) : '';
    $rows[] = array($type, $extension, is_array($info['name']) ? reset($info['name']) : $info['name'], is_array($info['module']) ? implode(', ', $info['module']) : $info['module']);
  }
  sort($rows);

  if (empty($rows)) {
    $rows[] = array(array('data' => t('No MIME types registered.'), 'colspan' => '4'));
  }

  return theme('table', $head, $rows);
}

/**
 * Implements the file formats page.
 *
 * @return
 *   The themed HTML page.
 */
function file_admin_menu_block_page() {
  $item = menu_get_item();
  if ($content = system_admin_menu_block($item)) {
    $output = theme('admin_block_content', $content);
  }
  else {
    $output = t('You do not have any format items.');
  }
  return $output;
}

