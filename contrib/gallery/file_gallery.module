<?php
// $Id$

/**
 * @file
 * Provides a taxonomy-based gallery view of various file types such as
 * images and videos.
 */

//////////////////////////////////////////////////////////////////////////////

define('FILE_GALLERY_PER_PAGE',   variable_get('file_gallery_per_page', 12));
define('FILE_GALLERY_EMBED_SIZE', variable_get('file_gallery_embed_size', '130x150'));
define('FILE_GALLERY_POPUP_SIZE', variable_get('file_gallery_popup_size', '800x600'));
//define('FILE_GALLERY_SHOW_TYPE',  variable_get('file_gallery_show_type', 1));

define('FILE_GALLERY_TITLE_LENGTH_SHORT',  18);

//////////////////////////////////////////////////////////////////////////////
// CODE API HOOKS

/**
 * Implementation of hook_help().
 */
function file_gallery_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/file/gallery':
      return '<p>'. t('File gallery uses the same vocabularies as !file_browser module.', array('!file_browser' => l('file browser', 'admin/settings/file/browser'))) .'</p>';
  }
}

/**
 * Implementation of hook_theme().
 */
function file_gallery_theme() {
  return array(
    'file_gallery_page' => array(
      'arguments' => array('content' => NULL, 'options' => NULL),
      'file' => 'file_gallery.theme.inc'
    ),
    'file_gallery_term' => array(
      'arguments' => array('data' => NULL, 'options' => NULL),
      'file' => 'file_gallery.theme.inc'
    ),
    'file_gallery_node' => array(
      'arguments' => array('data' => NULL, 'options' => NULL),
      'file' => 'file_gallery.theme.inc'
    ),
    'file_gallery_empty' => array(
      'arguments' => array('filter' => NULL),
      'file' => 'file_gallery.theme.inc'
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function file_gallery_perm() {
  return array('view files');
}

/**
 * Implementation of hook_menu().
 */
function file_gallery_menu() {
  return array(
    'admin/settings/file/gallery' => array(
      'title' => 'Gallery',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('file_gallery_admin_settings'),
      'access arguments' => array('administer site configuration'),
      'file' => 'file_gallery.admin.inc',
    ),
    'file_gallery' => array(
      'title' => 'File gallery',
      'page callback' => 'file_gallery_page',
      'access arguments' => array('view files'),
      'type' => MENU_NORMAL_ITEM,
    ),
  );
}

//////////////////////////////////////////////////////////////////////////////
// MENU CALLBACKS

/**
 * Menu callback for rendering a file gallery page.
 */
function file_gallery_page($vid = 'my', $tid = NULL, $filter = NULL) {
  if ($vid != 'my' && !is_numeric($vid)) {
    drupal_set_message('No vocabulary specified.', 'error');
    return '';
  }

  $layout = empty($_GET['layout']) || $_GET['layout'] == 'on';
  $module = !empty($_GET['module']) ? $_GET['module'] : NULL;
  $tids = empty($tid) ? array() : array((integer)$tid);
  print theme(($layout ? 'page' : 'file_gallery_page'), file_gallery_content($vid, $tids, $filter, array('module' => $module, 'layout' => $layout)), array('breadcrumb' => TRUE));
}

//////////////////////////////////////////////////////////////////////////////

/*
 * Builds a gallery content.
 */
function file_gallery_content($vid, $tids = array(), $filter = NULL, $options = array()) {
  $module = empty($options['module']) ? NULL : $options['module'];
  _file_gallery_add_headers($module);

  $pager = $module ? module_invoke($module, 'file_gallery', 'pager') : FILE_GALLERY_PER_PAGE;
  $vocabularies = taxonomy_get_vocabularies();
  $vocabulary = ($vid != 'my') ? $vocabularies[$vid] : NULL;
  $term = taxonomy_get_term(reset($tids));
  drupal_set_title($term ? $term->name : ($vocabulary ? $vocabulary->name : NULL));

  $embed_options = _file_gallery_embed_options();

  $output .= _file_gallery_head(array('vid' => $vid, 'tid' => $term->tid, 'filter' => $filter, 'module' => $module));
  $output .= '<div id="file-gallery-body">';
  $output .= '<ul class="file-gallery">';

  $folders = $files = 0;
  if ($vid == 'my') {
    // For the vocabulary view, get the list of file_browser.module
    // vocabularies, if available, and the user's og_vocab.module
    // subscriptions:
    $terms = array();

    if (module_exists('file_browser')) {
      $terms = array_filter(variable_get('file_browser_vocabularies', array()), 'is_string');
    }

    if (module_exists('og_vocab') && FILE_BROWSER_OG_VOCABULARIES) {
      global $user;
      foreach (array_keys($user->og_groups) as $nid) {
        $result = db_query('SELECT vid FROM {og_vocab} WHERE nid = %d', $nid);
        while ($vid = db_result($result)) {
          if (!array_key_exists($vid, $terms)) {
            $terms[$vid] = (string)$vid;
          }
        }
      }
    }

    $vocabularies = taxonomy_get_vocabularies('file');
    foreach ($terms as $term) {
      $folders++;
      $output .= _file_gallery_term($vocabularies[$term], $embed_options, $module);
    }
  }
  else {
    if (!$filter || $filter == 'folder') {
      //if ($terms = taxonomy_get_children(!empty($tids) ? reset($tids) : 0, $vid)) {
      //  foreach ($terms as $term) {
      $result = pager_query(db_rewrite_sql('SELECT t.* FROM {term_data} t INNER JOIN {term_hierarchy} h ON h.tid = t.tid WHERE t.vid = %d AND h.parent = %d ORDER BY weight, name', 't', 'tid'), $pager, 0, NULL, $vid, !empty($tids) ? reset($tids) : 0);
      while ($term = db_fetch_object($result)) {
        $folders++;
        $output .= _file_gallery_term($term, $embed_options, $module);
      //  }
      }
    }
    $output .= '</ul>';
    $output .= theme('pager', NULL, $pager, 0);
    $output .= '<ul class="file-gallery">';

    $result = _file_gallery_taxonomy_select_nodes($tids, 'and', 0, array('limit' => $pager, 'element' => 1), 'n.sticky DESC, n.title ASC', $filter);
    while ($nid = db_result($result)) {
      $output .= _file_gallery_node(node_load($nid), $embed_options, $module);
      $files++;
    }
  }

  $output .= '</ul>';
  $output .= theme('pager', NULL, $pager, 1);

  if ($folders == 0 && $files == 0) {
    $output .= theme('file_gallery_empty', $filter);
  }
  $output .= '</div>'; // file-gallery-body

  _file_gallery_add_footers($module);
  return $output;
}

/*
 * Builds a head section of the gallery.
 */
function _file_gallery_head($data) {
  $output = '<div id="file-gallery-head">';
  $output .= _file_gallery_breadcrumb($data);
  $output .= _file_gallery_filter($data);
  $output .= '</div>';
  return $output;
}

/*
 * Builds a breadcrumb.
 */
function _file_gallery_breadcrumb($data) {
  $breadcrumb = array();

  $query = $data['module'] ? module_invoke($data['module'], 'file_gallery', 'query') : NULL;

  // If the gallery is being embedded by some other module, we'll make the
  // Home link point to the "My Galleries" view instead of the home page,
  // so as not to break any IFRAMEs that we may be embedded in.
  $breadcrumb[] = !$data['module'] ? l(t('Home'), '') : l(t('Home'), 'file_gallery/my', array('query' => $query));

  if ($data['vid'] != 'my') {
    $vocabularies = taxonomy_get_vocabularies();
    $vocabulary = $vocabularies[$data['vid']];
    $breadcrumb[] = l($vocabulary->name, 'file_gallery/'. $data['vid'], array('query' => $query));
  }

  if ($data['tid']) {
    foreach (taxonomy_get_parents($data['tid']) as $parent) {
      $breadcrumb[] = l($parent->name, 'file_gallery/'. $data['vid'] .'/'. $parent->tid, array('query' => $query));
    }

    $term = taxonomy_get_term($data['tid']);
    $breadcrumb[] = l($term->name, 'file_gallery/'. $data['vid'] .'/'. $data['tid'], array('query' => $query));
  }

  drupal_set_breadcrumb($breadcrumb);
}

/*
 * Builds a file node filter.
 */
function _file_gallery_filter($data) {
  // The filter drop-down box allows restricting the current gallery view
  // based on file content types.
  $output = '<div id="file-gallery-filter">';

  $filter_choices = array('' => t('Everything'), 'folder' => t('Only folders'));
  $filter_choices += ($data['vid'] == 'my') ? array() : array('image' => t('Only images'), 'audio' => t('Only audio'), 'video' => t('Only video'));

  $select = array('#name' => 'filter', '#id' => 'file-gallery-selector', '#type' => 'select', '#title' => t('Show'), '#value' => $data['filter'], '#options' => $filter_choices, '#parents' => array());

  if ($data['vid'] == 'my') {
    // Disable the selector on the top-level, as there is nothing else shown but folders
    $select['#attributes'] = array('disabled' => 'disabled');
  }

  $output .= theme_select($select);
  $output .= '</div>';
  return $output;
}

/*
 * Builds an idividual taxonomy term block.
 */
function _file_gallery_term($term, $options = array(), $module = NULL) {
  $query = $module ? module_invoke($module, 'file_gallery', 'query') : NULL;
  $url = $module ? module_invoke($module, 'file_gallery', 'term_link', $term->tid) : NULL;
  $url = $url ? $url : 'file_gallery/'. $term->vid . (!empty($term->tid) ? '/'. $term->tid : '');

  return theme('file_gallery_term', compact('term', 'query', 'url'), $options);
}

/*
 * Builds a file node block.
 */
function _file_gallery_node($node, $options = array(), $module = NULL) {
  $class = $module ? module_invoke($module, 'file_gallery', 'node_class') : 'thickbox';
  $url_preview = $module ? module_invoke($module, 'file_gallery', 'node_link', $node->nid) : NULL;
  $file_links = $module ? module_invoke($module, 'file_gallery', 'file_links', $node->nid) : array();

  $file = $node->file;

  // Find a thumbnail for the file.
  $thumbnail = file_get_image($file, 'file_image_thumbnail', explode('x', FILE_IMAGE_THUMBNAIL_RESOLUTION));
  //$thumbnail = $thumbnail ? $thumbnail : '<br /><span class="no-thumbnail">'. t('No thumbnail') .'</span><br />';

  // Find a first enabled handler for the file.
  $preview = _file_gallery_preview($file);
  $width_preview = $preview['width'];
  $height_preview = $preview['height'];

  $url_preview = $url_preview ? $url_preview : array('link' => 'node/'. $file->nid .'/embed/'. $preview['handler'], 'query' => array('width' => $preview['width'], 'height' => $preview['height']));
  $url_open = $module ? module_invoke($module, 'file_gallery', 'node_link', $node->nid, FALSE) : array('link' => 'node/'. $node->nid);

  $title = check_plain($node->title);
  $title_short = drupal_strlen($title) > FILE_GALLERY_TITLE_LENGTH_SHORT ? drupal_substr($title, 0, FILE_GALLERY_TITLE_LENGTH_SHORT - 3) .'...' : $title;

  return theme('file_gallery_node', compact('file', 'thumbnail', 'title', 'title_short', 'class', 'url_preview', 'url_open', 'width_preview', 'height_preview', 'file_links'), $options);
}

//////////////////////////////////////////////////////////////////////////////
// Miscellaneous helpers

/*
 * Finds a file first preview handler with parameters.
 *
 * @param $file
 *   A file object.
 *
 * @return
 *   An array with a preview parameters.
 */
function _file_gallery_preview($file) {
  $previews = array();
  $file_handlers = file_handlers_for($file);
  foreach (file_get_mime_handlers() as $handler => $data) {
    if (array_key_exists($handler, $file_handlers) && $data['enabled'] == 1 && function_exists($handler .'_render')) {
      $previews[] = $handler;
    }
  }
  $handler = !empty($previews) ? reset($previews) : NULL;
  $width = $height = 0;
  if ($handler) {
    $handlers = file_get_mime_handlers();
    list($width, $height) = explode('x', $handlers[$handler]['dimensions']);
    $generated_found = FALSE;
    $generated = rdf_normalize(rdf_query(NULL, rdf_qname_to_uri('dc:source'), $file->uri));
    foreach ($generated as $uri => $data) {
      if (rdf_value($uri, rdf_qname_to_uri('dc:creator')) == $handler) {
        $generated_found = TRUE;
        break;
      }
    }
    if (!$generated_found) {
      // We're displaying the file itself.
      $uri = $file->uri;
    }
    foreach (array('exif', 'wordnet') as $name) {
      $width += rdf_value($uri, rdf_qname_to_uri($name .':width'))->value;
      $height += rdf_value($uri, rdf_qname_to_uri($name .':height'))->value;
    }
  }
  list($width_max, $height_max) = explode('x', FILE_GALLERY_POPUP_SIZE);
  $width = min($width, $width_max);
  $height = min($height, $height_max);

  return array('handler' => $handler, 'width' => $width, 'height' => $height);
}

/*
 * Sets a default embed options.
 */
function _file_gallery_embed_options() {
  list($width, $height) = explode('x', FILE_GALLERY_EMBED_SIZE);
  return array('max_width' => $width, 'max_height' => $height);
}

/*
 * Loads a page headders.
 */
function _file_gallery_add_headers($module = NULL) {
  static $initialized = FALSE;
  if (!$initialized) {
    $initialized = TRUE;

    drupal_add_css(drupal_get_path('module', 'file_gallery') .'/file_gallery.css', 'module');
    drupal_add_js(drupal_get_path('module', 'file_gallery') .'/file_gallery.js', 'module');
  }
}

/*
 * Loads a page footers.
 */
function _file_gallery_add_footers($module = NULL) {
  static $initialized = FALSE;
  if (!$initialized) { // once only
    $initialized = TRUE;

    //drupal_add_js('$(document).ready(function() { $(\'a.file-metadata\').cluetip({activation: \'click\', arrows: true}); });', 'inline');
    //drupal_add_js('$(document).ready(function() { $(\'a.file-metadata\').cluetip({arrows: true}); });', 'inline');
  }
}

/*
 * Modified taxonomy_select_nodes() function.
 */
function _file_gallery_taxonomy_select_nodes($tids = array(), $operator = 'or', $depth = 0, $pager = array(), $order = 'n.sticky DESC, n.created DESC', $filter = NULL) {
  if (count($tids) > 0) {
    // For each term ID, generate an array of descendant term IDs to the right depth.
    $descendant_tids = array();
    if ($depth === 'all') {
      $depth = NULL;
    }
    foreach ($tids as $index => $tid) {
      $term = taxonomy_get_term($tid);
      $tree = taxonomy_get_tree($term->vid, $tid, -1, $depth);
      $descendant_tids[] = array_merge(array($tid), array_map('_taxonomy_get_tid_from_term', $tree));
    }

    $sql_filter = $filter ? " AND fn.type LIKE '%s%'" : '';

    if ($operator == 'or') {
      $args = call_user_func_array('array_merge', $descendant_tids);
      $placeholders = db_placeholders($args, 'int');
      $sql = 'SELECT DISTINCT(n.nid), n.sticky, n.title, n.created FROM {node} n INNER JOIN {file_nodes} fn ON n.vid = fn.vid INNER JOIN {term_node} tn ON n.vid = tn.vid WHERE tn.tid IN ('. $placeholders .') AND n.status = 1'. $sql_filter .' ORDER BY '. $order;
      $sql_count = 'SELECT COUNT(DISTINCT(n.nid)) FROM {node} n INNER JOIN {file_nodes} fn ON n.vid = fn.vid INNER JOIN {term_node} tn ON n.vid = tn.vid WHERE tn.tid IN ('. $placeholders .') AND n.status = 1'. $sql_filter;
    }
    else {
      $joins = '';
      $wheres = '';
      $args = array();
      foreach ($descendant_tids as $index => $tids) {
        $joins .= ' INNER JOIN {term_node} tn'. $index .' ON n.vid = tn'. $index .'.vid';
        $wheres .= ' AND tn'. $index .'.tid IN ('. db_placeholders($tids, 'int') .')';
        $args = array_merge($args, $tids);
      }
      $sql = 'SELECT DISTINCT(n.nid), n.sticky, n.title, n.created FROM {node} n INNER JOIN {file_nodes} fn ON n.vid = fn.vid '. $joins .' WHERE n.status = 1 '. $wheres . $sql_filter .' ORDER BY '. $order;
      $sql_count = 'SELECT COUNT(DISTINCT(n.nid)) FROM {node} n INNER JOIN {file_nodes} fn ON n.vid = fn.vid '. $joins .' WHERE n.status = 1 '. $wheres . $sql_filter;
    }
    if ($filter) {
      $args[] = $filter;
    }
    $sql = db_rewrite_sql($sql);
    $sql_count = db_rewrite_sql($sql_count);
    if (!empty($pager)) {
      $result = pager_query($sql, $pager['limit'], $pager['element'], $sql_count, $args);
    }
    else {
      $result = db_query($sql, $args);
    }
  }

  return $result;
}

